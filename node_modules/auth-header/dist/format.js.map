{"version":3,"sources":["../src/format.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAEA,IAAM,MAAM,SAAN,GAAM,CAAC,GAAD;SAAS,UAAC,KAAD;WAChB,aAAO,SAAS,CAAC,mBAAQ,KAAR,CAAD,GAAkB,iBAAM,KAAN,CAA3B,GAA0C,KAA1C;GADS;CAAT;;AAGZ,IAAM,QAAQ,SAAR,KAAQ,CAAC,MAAD,EAAY;AACxB,SAAO,OAAO,MAAP,CAAc,UAAC,IAAD,QAAyB;;;QAAjB,eAAiB;QAAZ,kBAAY;;AAC5C,QAAM,YAAY,IAAI,GAAJ,CAAZ,CADsC;AAE5C,QAAI,CAAC,mBAAQ,GAAR,CAAD,EAAe;AACjB,YAAM,IAAI,SAAJ,EAAN,CADiB;KAAnB;AAGA,QAAI,MAAM,OAAN,CAAc,MAAd,CAAJ,EAA2B;AACzB,0CAAW,0BAAS,OAAO,GAAP,CAAW,SAAX,GAApB,CADyB;KAA3B;AAGA,wCAAW,QAAM,UAAU,MAAV,GAAjB,CAR4C;GAAzB,EASlB,EATI,CAAP,CADwB;CAAZ;;AAad,IAAM,YAAY,SAAZ,SAAY,CAAC,MAAD,EAAS,OAAT,EAAqB;AACrC,MAAI,MAAM,OAAN,CAAc,MAAd,CAAJ,EAA2B;AACzB,WAAO,MAAM,MAAN,CAAP,CADyB;GAA3B,MAEO,IAAI,QAAO,uDAAP,KAAkB,QAAlB,EAA4B;AACrC,WAAO,UACL,OAAO,IAAP,CAAY,MAAZ,EAAoB,GAApB,CAAwB,UAAC,GAAD;aAAS,CAAC,GAAD,EAAM,OAAO,GAAP,CAAN;KAAT,CADnB,EAEL,OAFK,CAAP,CADqC;GAAhC;AAMP,QAAM,IAAI,SAAJ,EAAN,CATqC;CAArB;;kBAYH,UAAC,MAAD,EAAS,KAAT,EAAgB,MAAhB,EAA2B;AACxC,MAAM,MAAM,OAAO,MAAP,KAAkB,QAAlB,GAA6B,EAAC,cAAD,EAAS,YAAT,EAAgB,cAAhB,EAA7B,GAAuD,MAAvD,CAD4B;;AAGxC,MAAI,QAAO,iDAAP,KAAe,QAAf,EAAyB;AAC3B,UAAM,IAAI,SAAJ,EAAN,CAD2B;GAA7B,MAEO,IAAI,CAAC,oBAAS,IAAI,MAAJ,CAAV,EAAuB;AAChC,UAAM,IAAI,SAAJ,CAAc,iBAAd,CAAN,CADgC;GAA3B;;AAIP,SAAO,CACL,IAAI,MAAJ,4BACI,OAAO,IAAI,KAAJ,KAAc,WAArB,GAAmC,CAAC,IAAI,KAAJ,CAApC,GAAiD,EAAjD,sBACA,OAAO,IAAI,MAAJ,KAAe,WAAtB,GAAoC,UAAU,IAAI,MAAJ,CAA9C,GAA4D,EAA5D,EAHC,CAIL,IAJK,CAIA,GAJA,CAAP,CATwC;CAA3B","file":"format.js","sourcesContent":["import {quote, isToken, isScheme} from './util';\n\nconst xxx = (key) => (value) =>\n  `${key}=${value && !isToken(value) ? quote(value) : value}`;\n\nconst build = (params) => {\n  return params.reduce((prev, [key, values]) => {\n    const transform = xxx(key);\n    if (!isToken(key)) {\n      throw new TypeError();\n    }\n    if (Array.isArray(values)) {\n      return [...prev, ...values.map(transform)];\n    }\n    return [...prev, transform(values)];\n  }, []);\n};\n\nconst challenge = (params, options) => {\n  if (Array.isArray(params)) {\n    return build(params);\n  } else if (typeof params === 'object') {\n    return challenge(\n      Object.keys(params).map((key) => [key, params[key]]),\n      options\n    );\n  }\n  throw new TypeError();\n};\n\nexport default (scheme, token, params) => {\n  const obj = typeof scheme === 'string' ? {scheme, token, params} : scheme;\n\n  if (typeof obj !== 'object') {\n    throw new TypeError();\n  } else if (!isScheme(obj.scheme)) {\n    throw new TypeError('Invalid scheme.');\n  }\n\n  return [\n    obj.scheme,\n    ...(typeof obj.token !== 'undefined' ? [obj.token] : []),\n    ...(typeof obj.params !== 'undefined' ? challenge(obj.params) : []),\n  ].join(' ');\n};\n"]}