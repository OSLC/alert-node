'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchWithCredentials = exports.requiresAuth = exports.getRegisteredRp = exports.logout = exports.currentSession = exports.login = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var getStoredRp = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(storage) {
    var data, rpConfig;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (0, _storage.getData)(storage);

          case 2:
            data = _context3.sent;
            rpConfig = data.rpConfig;

            if (!rpConfig) {
              _context3.next = 9;
              break;
            }

            rpConfig.store = storage;
            return _context3.abrupt('return', _oidcRp2.default.from(rpConfig));

          case 9:
            return _context3.abrupt('return', null);

          case 10:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function getStoredRp(_x4) {
    return _ref3.apply(this, arguments);
  };
}();

var storeRp = function () {
  var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(storage, idp, rp) {
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return (0, _storage.updateStorage)(storage, function (data) {
              return (0, _extends3.default)({}, data, {
                rpConfig: rp
              });
            });

          case 2:
            return _context4.abrupt('return', rp);

          case 3:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function storeRp(_x5, _x6, _x7) {
    return _ref4.apply(this, arguments);
  };
}();

require('isomorphic-fetch');

var _authHeader = require('auth-header');

var authorization = _interopRequireWildcard(_authHeader);

var _oidcRp = require('@trust/oidc-rp');

var _oidcRp2 = _interopRequireDefault(_oidcRp);

var _PoPToken = require('@trust/oidc-rp/lib/PoPToken');

var _PoPToken2 = _interopRequireDefault(_PoPToken);

var _urlUtil = require('./url-util');

var _storage = require('./storage');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global fetch, RequestInfo, Response */
var login = exports.login = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(idp, options) {
    var rp;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return getRegisteredRp(idp, options);

          case 3:
            rp = _context.sent;
            _context.next = 6;
            return saveAppHashFragment(options.storage);

          case 6:
            return _context.abrupt('return', function () {
              return sendAuthRequest(rp, options);
            });

          case 9:
            _context.prev = 9;
            _context.t0 = _context['catch'](0);

            console.warn('Error logging in with WebID-OIDC');
            console.error(_context.t0);
            return _context.abrupt('return', null);

          case 14:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 9]]);
  }));

  return function login(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var currentSession = exports.currentSession = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
    var storage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _storage.defaultStorage)();
    var rp, url, storeData, resp, idp, idToken, accessToken, clientId, sessionKey;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return getStoredRp(storage);

          case 3:
            rp = _context2.sent;

            if (rp) {
              _context2.next = 6;
              break;
            }

            return _context2.abrupt('return', null);

          case 6:
            url = (0, _urlUtil.currentUrl)();

            if (!(!url || !url.includes('#'))) {
              _context2.next = 9;
              break;
            }

            return _context2.abrupt('return', null);

          case 9:
            _context2.next = 11;
            return (0, _storage.getData)(storage);

          case 11:
            storeData = _context2.sent;
            _context2.next = 14;
            return rp.validateResponse(url, storeData);

          case 14:
            resp = _context2.sent;

            if (resp) {
              _context2.next = 17;
              break;
            }

            return _context2.abrupt('return', null);

          case 17:
            _context2.next = 19;
            return restoreAppHashFragment(storage);

          case 19:
            idp = resp.idp, idToken = resp.idToken, accessToken = resp.accessToken, clientId = resp.clientId, sessionKey = resp.sessionKey;
            return _context2.abrupt('return', {
              authType: 'WebID-OIDC',
              webId: resp.decoded.payload.sub,
              idp: idp,
              idToken: idToken,
              accessToken: accessToken,
              clientId: clientId,
              sessionKey: sessionKey
            });

          case 23:
            _context2.prev = 23;
            _context2.t0 = _context2['catch'](0);

            console.warn('Error finding a WebID-OIDC session');
            console.error(_context2.t0);
            return _context2.abrupt('return', null);

          case 28:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[0, 23]]);
  }));

  return function currentSession() {
    return _ref2.apply(this, arguments);
  };
}();

var logout = exports.logout = function logout(storage) {
  return getStoredRp(storage).then(function (rp) {
    return rp ? rp.logout() : undefined;
  }).catch(function (err) {
    console.warn('Error logging out of the WebID-OIDC session');
    console.error(err);
  });
};

var getRegisteredRp = exports.getRegisteredRp = function getRegisteredRp(idp, options) {
  return getStoredRp(options.storage).then(function (rp) {
    if (rp && rp.provider.url === idp) {
      return rp;
    }
    return registerRp(idp, options).then(function (rp) {
      return storeRp(options.storage, idp, rp);
    });
  });
};

var registerRp = function registerRp(idp, _ref5) {
  var storage = _ref5.storage,
      callbackUri = _ref5.callbackUri;

  var responseType = 'id_token token';
  var registration = {
    issuer: idp,
    grant_types: ['implicit'],
    redirect_uris: [callbackUri],
    response_types: [responseType],
    scope: 'openid profile'
  };
  var options = {
    defaults: {
      authenticate: {
        redirect_uri: callbackUri,
        response_type: responseType
      }
    },
    store: storage
  };
  return _oidcRp2.default.register(idp, registration, options);
};

var sendAuthRequest = function () {
  var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(rp, _ref7) {
    var callbackUri = _ref7.callbackUri,
        storage = _ref7.storage;
    var data, url;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return (0, _storage.getData)(storage);

          case 2:
            data = _context5.sent;
            _context5.next = 5;
            return rp.createRequest({ redirect_uri: callbackUri }, data);

          case 5:
            url = _context5.sent;
            _context5.next = 8;
            return (0, _storage.updateStorage)(storage, function () {
              return data;
            });

          case 8:
            return _context5.abrupt('return', (0, _urlUtil.navigateTo)(url));

          case 9:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  }));

  return function sendAuthRequest(_x8, _x9) {
    return _ref6.apply(this, arguments);
  };
}();

var saveAppHashFragment = function saveAppHashFragment(store) {
  return (0, _storage.updateStorage)(store, function (data) {
    return (0, _extends3.default)({}, data, {
      appHashFragment: window.location.hash
    });
  });
};

var restoreAppHashFragment = function restoreAppHashFragment(store) {
  return (0, _storage.updateStorage)(store, function (data) {
    window.location.hash = data.appHashFragment;
    delete data.appHashFragment;
    return data;
  });
};

/**
 * Answers whether a HTTP response requires WebID-OIDC authentication.
 */
var requiresAuth = exports.requiresAuth = function requiresAuth(resp) {
  if (resp.status !== 401) {
    return false;
  }
  var wwwAuthHeader = resp.headers.get('www-authenticate');
  if (!wwwAuthHeader) {
    return false;
  }
  var auth = authorization.parse(wwwAuthHeader);
  return auth.scheme === 'Bearer' && auth.params && auth.params.scope === 'openid webid';
};

/**
 * Fetches a resource, providing the WebID-OIDC ID Token as authentication.
 * Assumes that the resource has requested those tokens in a previous response.
 */
var fetchWithCredentials = exports.fetchWithCredentials = function fetchWithCredentials(session) {
  return function () {
    var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(url, options) {
      var popToken, authenticatedOptions;
      return _regenerator2.default.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return _PoPToken2.default.issueFor(url, session);

            case 2:
              popToken = _context6.sent;
              authenticatedOptions = (0, _extends3.default)({}, options, {
                headers: (0, _extends3.default)({}, options && options.headers ? options.headers : {}, {
                  authorization: 'Bearer ' + popToken
                })
              });
              return _context6.abrupt('return', fetch(url, authenticatedOptions));

            case 5:
            case 'end':
              return _context6.stop();
          }
        }
      }, _callee6, undefined);
    }));

    return function (_x10, _x11) {
      return _ref8.apply(this, arguments);
    };
  }();
};