'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.openIdpSelector = exports.startPopupServer = exports.appOriginHandler = exports.loginHandler = exports.storageHandler = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _ipc = require('./ipc');

var _urlUtil = require('./url-util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var popupAppRequestHandler = function popupAppRequestHandler(store, options, foundSessionCb) {
  return (0, _ipc.combineHandlers)(storageHandler(store), loginHandler(options, foundSessionCb), appOriginHandler);
};

var storageHandler = exports.storageHandler = function storageHandler(store) {
  return function (req) {
    var id = req.id,
        method = req.method,
        args = req.args;

    switch (method) {
      case 'storage/getItem':
        return store.getItem.apply(store, (0, _toConsumableArray3.default)(args)).then(function (item) {
          return { id: id, ret: item };
        });
      case 'storage/setItem':
        return store.setItem.apply(store, (0, _toConsumableArray3.default)(args)).then(function () {
          return { id: id, ret: null };
        });
      case 'storage/removeItem':
        return store.removeItem.apply(store, (0, _toConsumableArray3.default)(args)).then(function () {
          return { id: id, ret: null };
        });
      default:
        return null;
    }
  };
};

var loginHandler = exports.loginHandler = function loginHandler(options, foundSessionCb) {
  return function (req) {
    var id = req.id,
        method = req.method,
        args = req.args;

    switch (method) {
      case 'getLoginOptions':
        return _promise2.default.resolve({
          id: id,
          ret: {
            popupUri: options.popupUri,
            callbackUri: options.callbackUri
          }
        });
      case 'foundSession':
        foundSessionCb(args[0]);
        return _promise2.default.resolve({ id: id, ret: null });
      default:
        return null;
    }
  };
};

var appOriginHandler = exports.appOriginHandler = function appOriginHandler(req) {
  var id = req.id,
      method = req.method;

  return method === 'getAppOrigin' ? _promise2.default.resolve({ id: id, ret: window.location.origin }) : null;
};

var startPopupServer = exports.startPopupServer = function startPopupServer(store, childWindow, options) {
  return new _promise2.default(function (resolve, reject) {
    if (!(options.popupUri && options.callbackUri)) {
      return reject(new Error('Cannot serve a popup without both "options.popupUri" and "options.callbackUri"'));
    }
    var popupServer = (0, _ipc.server)(childWindow, (0, _urlUtil.originOf)(options.popupUri))(popupAppRequestHandler(store, options, function (session) {
      popupServer.stop();
      resolve(session);
    }));
    popupServer.start();
  });
};

var openIdpSelector = exports.openIdpSelector = function openIdpSelector(options) {
  if (!(options.popupUri && options.callbackUri)) {
    throw new Error('Cannot open IDP select UI.  Must provide both "options.popupUri" and "options.callbackUri".');
  }
  var width = 650;
  var height = 400;
  var w = window.open(options.popupUri, '_blank', 'width=' + width + ',height=' + height + ',left=' + (window.innerWidth - width) / 2 + ',top=' + (window.innerHeight - height) / 2);
  return w;
};