'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.authnFetch = authnFetch;

require('isomorphic-fetch');

var _host = require('./host');

var _session = require('./session');

var _webidOidc = require('./webid-oidc');

var WebIdOidc = _interopRequireWildcard(_webidOidc);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global fetch, RequestInfo, Response */
function authnFetch(storage) {
  var _this = this;

  return function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(url, options) {
      var session, shouldShareCreds, resp, _shouldShareCreds;

      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              options = options || {};
              _context.next = 3;
              return (0, _session.getSession)(storage);

            case 3:
              session = _context.sent;
              _context.next = 6;
              return shouldShareCredentials(storage)(url);

            case 6:
              shouldShareCreds = _context.sent;

              if (!(session && shouldShareCreds)) {
                _context.next = 9;
                break;
              }

              return _context.abrupt('return', fetchWithCredentials(session, url, options));

            case 9:
              _context.next = 11;
              return fetch(url, options);

            case 11:
              resp = _context.sent;

              if (!(resp.status === 401)) {
                _context.next = 20;
                break;
              }

              _context.next = 15;
              return (0, _host.updateHostFromResponse)(storage)(resp);

            case 15:
              _context.next = 17;
              return shouldShareCredentials(storage)(url);

            case 17:
              _shouldShareCreds = _context.sent;

              if (!(session && _shouldShareCreds)) {
                _context.next = 20;
                break;
              }

              return _context.abrupt('return', fetchWithCredentials(session, url, options));

            case 20:
              return _context.abrupt('return', resp);

            case 21:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
}

function shouldShareCredentials(storage) {
  var _this2 = this;

  return function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(url) {
      var session, requestHost;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return (0, _session.getSession)(storage);

            case 2:
              session = _context2.sent;

              if (session) {
                _context2.next = 5;
                break;
              }

              return _context2.abrupt('return', false);

            case 5:
              _context2.next = 7;
              return (0, _host.getHost)(storage)(url);

            case 7:
              requestHost = _context2.sent;
              return _context2.abrupt('return', requestHost != null && session.authType === requestHost.authType);

            case 9:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, _this2);
    }));

    return function (_x3) {
      return _ref2.apply(this, arguments);
    };
  }();
}

var fetchWithCredentials = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(session, url, options) {
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.t0 = session.authType;
            _context3.next = _context3.t0 === 'WebID-OIDC' ? 3 : _context3.t0 === 'WebID-TLS' ? 4 : 4;
            break;

          case 3:
            return _context3.abrupt('return', WebIdOidc.fetchWithCredentials(session)(url, options));

          case 4:
            return _context3.abrupt('return', fetch(url, options));

          case 5:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function fetchWithCredentials(_x4, _x5, _x6) {
    return _ref3.apply(this, arguments);
  };
}();